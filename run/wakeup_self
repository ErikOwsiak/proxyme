#!/usb/bin/env python3

import os, sys, flask
from flask import request as req
from flask import Response as rsp
# -- change to root folder --
os.chdir("../")
sys.path.insert(0, os.getcwd())
from syscore.systypes import *
from syscore.selfOps import selfOps


BIND_IP: str = "0.0.0.0"
BIND_PORT: int = 8086
STATIC_DIR: str = ""
STATIC_URL: str = ""
TEMPLATE_DIR: str = ""
CT_JSON: str = "application/json"
CT_ERROR: str = "runtime/error"


APP_NAME: str = "proxyMe"
proxyMeApp: flask.Flask = flask.Flask(APP_NAME,
   template_folder=TEMPLATE_DIR, static_url_path=STATIC_URL,
   static_folder=STATIC_DIR)


@proxyMeApp.route("/")
def index():
   try:
      return "index"
   except Exception as e:
      print(e)


@proxyMeApp.route("/self/data/in", methods=[httpVerb.POST])
def self_data(data_qry: str):
   try:
      rsp.content_type = CT_JSON
      buff: str = req.data.decode("utf-8")
      if buff in [None, ""]:
         return ""
      # -- -- -- --
      _selfOps: selfOps = selfOps()
      _selfOps.init()
      code, msg = _selfOps.imprint("text/url", buff)
      code: sysCode = code
      if code != sysCode.OK:
         pass
      else:
         return code.OK.name
   except Exception as e:
      rsp.content_type = CT_ERROR
      return str(e)


@proxyMeApp.route("/self/data/out/<qry>", methods=[httpVerb.GET])
def self_data(qry: str):
   try:
      return f"{qry}"
   except Exception as e:
      rsp.content_type = CT_ERROR
      return str(e)


# =================================================================
# -- -- [ entry point / start server ] -- --
if __name__ == "__main__":
   proxyMeApp.run(host=BIND_IP, port=BIND_PORT, debug=True)
